"use strict";
// https://tools.ietf.org/html/rfc4226
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = __importStar(require("crypto"));
var doubleDigits = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9];
var digitsPower = [
    1,
    10,
    100,
    1000,
    10000,
    100000,
    1000000,
    10000000,
    100000000,
];
function calcChecksum(num, digits) {
    var doubleDigit = true;
    var total = 0;
    while (0 < digits--) {
        var digit = num % 10;
        num /= 10;
        if (doubleDigit)
            digit = doubleDigits[digit];
        total += digit;
        doubleDigit = !doubleDigit;
    }
    var result = total % 10;
    if (result > 0)
        result = 10 - result;
    return result;
}
function default_1(parameters) {
    var secret = parameters.secret, movingFactor = parameters.movingFactor, codeDigits = parameters.codeDigits, addChecksum = parameters.addChecksum, truncationOffset = parameters.truncationOffset, hmacAlgorithm = parameters.hmacAlgorithm;
    if (!secret)
        throw new Error('no secret value');
    if (!movingFactor)
        movingFactor = 0;
    if (!codeDigits)
        codeDigits = 6;
    if (!addChecksum)
        addChecksum = false;
    if (!truncationOffset)
        truncationOffset = -1;
    if (!hmacAlgorithm)
        hmacAlgorithm = 'sha1';
    var secretLength;
    if (hmacAlgorithm === 'sha1')
        secretLength = 20;
    else if (hmacAlgorithm === 'sha256')
        secretLength = 32;
    else if (hmacAlgorithm === 'sha512')
        secretLength = 64;
    else
        throw new Error('algorithm not supported');
    var digits = addChecksum ? codeDigits + 1 : codeDigits;
    var text = Buffer.alloc(8);
    for (var i = text.length - 1; i >= 0; i--) {
        text[i] = movingFactor & 0xff;
        movingFactor >>= 8;
    }
    var hash = crypto
        .createHmac(hmacAlgorithm.toLowerCase(), Buffer.alloc(secretLength, secret))
        .update(text)
        .digest();
    var offset = hash[hash.length - 1] & 0xf;
    if (0 <= truncationOffset && truncationOffset < hash.length - 4)
        offset = truncationOffset;
    var binary = ((hash[offset] & 0x7f) << 24) |
        ((hash[offset + 1] & 0xff) << 16) |
        ((hash[offset + 2] & 0xff) << 8) |
        (hash[offset + 3] & 0xff);
    var otp = binary % digitsPower[codeDigits];
    if (addChecksum)
        otp = otp * 10 + calcChecksum(otp, codeDigits);
    var result = otp.toString();
    while (result.length < digits)
        result = '0' + result;
    return result;
}
exports.default = default_1;
//# sourceMappingURL=hotp.js.map